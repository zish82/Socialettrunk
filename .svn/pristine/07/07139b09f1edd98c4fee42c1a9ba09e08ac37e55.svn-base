using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using ClientLibrary.SocialMedia.Twitter;
using Microsoft.Practices.ObjectBuilder2;
using Socialet.Common;
using Socialet.ViewModels;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;

// The Basic Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234237

namespace Socialet.Views
{
    /// <summary>
    /// A basic page that provides characteristics common to most applications.
    /// </summary>
    public sealed partial class PostPage
    {
        private readonly ObservableCollection<AuthenticableSocialNetWorkViewModel> socialNetworks = new ObservableCollection<AuthenticableSocialNetWorkViewModel>();
        public ObservableCollection<AuthenticableSocialNetWorkViewModel> SocialNetWorks {
            get { return socialNetworks; }
        }

        private readonly ObservableCollection<PostViewModel> tweets = new ObservableCollection<PostViewModel>();
        public ObservableCollection<PostViewModel> Tweets { get { return tweets; } }

        public PostPage()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Populates the page with content passed during navigation.  Any saved state is also
        /// provided when recreating a page from a prior session.
        /// </summary>
        /// <param name="navigationParameter">The parameter value passed to
        /// <see cref="Frame.Navigate(Type, Object)"/> when this page was initially requested.
        /// </param>
        /// <param name="pageState">A dictionary of state preserved by this page during an earlier
        /// session.  This will be null the first time a page is visited.</param>
        protected override async void LoadState(Object navigationParameter, Dictionary<String, Object> pageState)
        {
            PopulateTweets(navigationParameter);
            DefaultViewModel["Items"] = socialNetworks;
            AuthenticableSocialNetWorkViewModel authenticableSocialNetWorkViewModel = socialNetworks.First();

            IEnumerable<PostViewModel> tweetViewModels = await authenticableSocialNetWorkViewModel.GetPosts();
            DefaultViewModel["TweetsSource"] = tweetViewModels;
        }

        private void PopulateTweets(object navigationParameter)
        {
            var authenticableSocialNetWorkViewModels =
                (ObservableCollection<AuthenticableSocialNetWorkViewModel>)navigationParameter;
            EnumerableExtensions.ForEach(authenticableSocialNetWorkViewModels, x => socialNetworks.Add(x));
        }

        /// <summary>
        /// Preserves state associated with this page in case the application is suspended or the
        /// page is discarded from the navigation cache.  Values must conform to the serialization
        /// requirements of <see cref="SuspensionManager.SessionState"/>.
        /// </summary>
        /// <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        protected override void SaveState(Dictionary<String, Object> pageState)
        {
        }
        
        private async void BtnPost_OnClick(object sender, RoutedEventArgs e)
        {
            var selected = socialNetworksList.SelectedItems;

            MessageDialog message;
            if (selected.Count == 0)
            {
                message = new MessageDialog("No social network was selected", "Posting Results");
                message.ShowAsync();
                return;
            }

            var results = new List<string>();
            foreach (var item in selected)
            {
                var s = (AuthenticableSocialNetWorkViewModel)item;
                
                if(!s.IsAuthenticated)
                    continue;

                PostingResult pResult = await s.SocialNetwork.Post(txtPost.Text);
                results.Add(string.Format("{0}: {1}",
                    s.Title,
                    pResult.Status));
            }
           
            message = new MessageDialog(string.Join(Environment.NewLine, results), "Posting Results");
            message.ShowAsync();

        }
    }
}
